#!/bin/python3

import sys
import os
import re
import getch
import requests as rq
from bs4 import BeautifulSoup as bs
import lxml

argv = sys.argv

cmin = 150
cmax = 300

if len(argv) == 2:
	cmin = int(argv[1])
	cmax = 1000000000000000
if len(argv) >= 3:
	cmax = int(argv[2])

height = os.get_terminal_size().lines
width = os.get_terminal_size().columns

def get_text():
	while True:
		s = rq.get("https://en.wikipedia.org/wiki/Special:Random").text
		so = bs(s, "lxml")
		titlea = so.findAll("h1")
		title = re.sub(r'\<[^<>]*\>', '', str(titlea[0]))
		title = re.sub(r'\[[^\[\]]*\]', '', title)
		title = re.sub(r'\([^\(\)]*\)', '', title)
		art = so.findAll("p")
		if len(art) < 2: continue
		st = re.sub(r'\<[^<>]*\>', '', str(art[1]))
		st = re.sub(r'\[[^\[\]]*\]', '', st)
		st = re.sub(r'\([^\(\)]*\)', '', st)
		st = str((st.strip().replace("  ", " ").replace(" , ", ", ")))
		if len(st) > cmin and len(st) < cmax:
			return [str(title), st]

def flush():
	sys.stdout.flush()
	pass

def cursor_white():
	print("\x1b[38;2;255;255;255m",end="")
	pass

def cursor_green():
	print("\x1b[38;2;0;255;0m",end="")
	pass

def cursor_red():
	print("\x1b[38;2;255;0;0m",end="")
	pass

def cursor_clear():
	print("\x1b[2J",end="");
	pass

def cursor_move_to(x, y):
	print("\x1b[" + str(int(y+1)) + ";" + str(int(x+1)) + "H",end="")
	pass
def cursor_move_back(c):
	if c == 0: return
	print("\x1b[" + str(int(c)) + "D",end="")
	pass

def word_length(s, p):
	i = p
	length = 0
	while i < len(s) and s[i] != ' ':
		length += 1
		i += 1
	return length+1

def print_text(t, e):
	cursor_move_to((width/2)-(len(t)/2), (height/4)-3)
	print(t,end="")
	link = "https://en.wikipedia.org/wiki/" + t.replace(" ", "_")
	cursor_move_to((width/2)-(len(link)/2), (height/4)-2)
	print(link,end="")
	cursor_move_to(width/4, height/4)
	pos = 0
	for y in range(int(len(e)//int(width/2))+1):
		cursor_move_to(width/4, int(height/4)+y)
		for x in range(int(width/2)):
			if pos >= len(e): break
			if int(width/4) + x + word_length(e, pos) > int(3*width/4): break
			print(e[pos],end="")
			pos += 1
	flush()
	pass

def move_to_text(t, opos):
	pos = 0
	for y in range(int(len(t)/int(width/2))+1):
		for x in range(int(width/2)):
			if pos >= len(t): break
			if int(width/4) + x + word_length(t, pos) > int(3*width/4): break
			if (opos == pos):
				cursor_move_to(int(width/4)+x, int(height/4)+y)
			pos += 1
	flush()
	pass

cursor_clear()
title, text = get_text()
buf = ""
pos = 0
lcorrect = -1
print_text(title, text)
cursor_move_to(width/4, height/4)
cursor_green()
flush()
while 1:
	c = getch.getch()
	if ord(c) == 127:
		if pos == 0 or (text[pos-1] == buf[pos-1] and lcorrect+1 == pos):
			lcorrect -= 1
		pos -= 1
		move_to_text(text, pos)
		cursor_white()
		print(text[pos],end="")
		move_to_text(text, pos)
		buf = buf[:-1]
	elif c == text[pos] and (pos == 0 or (text[pos-1] == buf[pos-1] and lcorrect+1 == pos)):
		cursor_green()
		print(text[pos],end="")
		lcorrect = pos
		pos += 1
		buf += c
		move_to_text(text, pos)
	else:
		cursor_red()
		if text[pos] == ' ': print("\x1b[48;2;255;0;0m \x1b[48;2;0;0;0m",end="")
		else: print(text[pos],end="")
		pos += 1
		buf += c
		move_to_text(text, pos)
	flush()
	if pos == len(text) and ((text[pos-1] == buf[pos-1] and lcorrect+1 == pos)):
		cursor_white()
		cursor_clear()
		title, text = get_text()
		buf = ""
		pos = 0
		lcorrect = -1
		print_text(title, text)
		cursor_move_to(width/4, height/4)
		cursor_green()
		flush()
	pass
